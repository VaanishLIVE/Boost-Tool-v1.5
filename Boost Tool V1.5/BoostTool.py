import os
import sys
import time
import random
import ctypes
import logging
from typing import List, Optional

# –¶–≤–µ—Ç–∞ ANSI (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
COLORS = {
    'red': "\033[31m",
    'white': "\033[37m",
    'cyan': "\033[36m",
    'purple': "\033[35m",
    'green': "\033[32m",
    'reset': "\033[0m"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–Ω–Ω–µ—Ä (—à—Ä–∏—Ñ—Ç 'speed')
PRECOMPILED_BANNER = r"""
          ____                  _     _____           _ 
         | __ )  ___   ___  ___| |_  |_   _|__   ___ | |
         |  _ \ / _ \ / _ \/ __| __|   | |/ _ \ / _ \| |
         | |_) | (_) | (_) \__ \ |_    | | (_) | (_) | |
         |____/ \___/ \___/|___/\__|   |_|\___/ \___/|_|
""".strip()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
CONSOLE_WIDTH = 80
SIMULATION_MODE = True
BANNER_CACHE = {} # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –±–∞–Ω–Ω–µ—Ä –ø—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω

def set_console_title(title: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ (—Ç–æ–ª—å–∫–æ Windows)"""
    try:
        if os.name == 'nt':
            ctypes.windll.kernel32.SetConsoleTitleW(title)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")

def clear_console():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏"""
    try:
        os.system('cls' if os.name == 'nt' else 'clear')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏: {e}")

def fast_print(text: str = "", end: str = "\n"):
    """–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        sys.stdout.write(text + end)
        sys.stdout.flush()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: {e}")

def generate_banner(font: str = 'slant') -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–Ω–Ω–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è PRECOMPILED_BANNER)"""
    if font in BANNER_CACHE:
        return BANNER_CACHE[font]
    
    try:
        from pyfiglet import Figlet
        f = Figlet(font=font)
        banner = f.renderText("Boost Tool")
    except ImportError:
        banner = "Boost Tool"
    except Exception as e:
        banner = "Boost Tool"
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞: {e}")
    
    BANNER_CACHE[font] = banner
    return banner

def print_title():
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π –≤—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞"""
    clear_console()
    
    try:
        # –£–ø—Ä–æ—â–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å os.get_terminal_size()
        console_width = CONSOLE_WIDTH

        banner = PRECOMPILED_BANNER
        lines = banner.split('\n')
        half = len(lines) // 2
        
        for i, line in enumerate(lines):
            # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –∫—Ä–∞—Å–Ω–æ-–±–µ–ª—ã–π —Ü–≤–µ—Ç
            color = COLORS['red'] if i < half else COLORS['white']
            fast_print(color + line.center(console_width) + COLORS['reset'])
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è
        fast_print(COLORS['white'] + "Version: 1.5".center(console_width) + COLORS['reset'])
        fast_print(COLORS['white'] + "".rjust(console_width) + COLORS['reset'])
        fast_print()
    except Exception as e:
        fast_print(COLORS['red'] + f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}" + COLORS['reset'])
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")

def validate_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ URL —Ñ–æ—Ä–º–∞—Ç–∞"""
    return url.startswith("https://discord.gg/")

def get_tokens() -> List[str]:
    """–í–≤–æ–¥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        input_str = input(COLORS['white'] + "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): " + COLORS['reset']).strip()
        return input_str.split() if input_str else ["fake_token"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return []

def check_token(token: str) -> str:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
    if SIMULATION_MODE or "fake" in token:
        return "valid_nitro"
    
    try:
        import requests
        response = requests.get(
            "https://discord.com/api/v9/users/@me",
            headers={"Authorization": token},
            timeout=5
        )
        return "valid_nitro" if response.status_code == 200 else "invalid"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return "error"

def process_boosts(tokens: List[str], count: int, action: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—É—Å—Ç–∞/–∞–Ω–±—É—Å—Ç–∞"""
    valid_tokens = [t for t in tokens if check_token(t) == "valid_nitro"]
    
    if not valid_tokens:
        fast_print(COLORS['red'] + " –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å Nitro!" + COLORS['reset'])
        return
    
    action_text = "–ë—É—Å—Ç" if action == "boost" else "–°–Ω—è—Ç–∏–µ –±—É—Å—Ç–∞"
    fast_print(COLORS['white'] + f" –ù–∞–π–¥–µ–Ω–æ {len(valid_tokens)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤." + COLORS['reset'])
    fast_print(COLORS['white'] + f" –ù–∞—á–∏–Ω–∞–µ–º {action_text}..." + COLORS['reset'])
    
    for token in valid_tokens:
        for _ in range(count):
            # –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞/–æ—à–∏–±–∫–∏
            if random.random() < 0.1:
                fast_print(COLORS['red'] + f" –û—à–∏–±–∫–∞ –ø—Ä–∏ {action_text} —Ç–æ–∫–µ–Ω–æ–º {token[:6]}..." + COLORS['reset'])
            else:
                fast_print(COLORS['green'] + f" –£—Å–ø–µ—à–Ω–æ {action_text} —Ç–æ–∫–µ–Ω–æ–º {token[:6]}..." + COLORS['reset'])
            time.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã

def main_menu():
    """–ú–µ–Ω—é —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
    print_title()
    
    menu_items = [
        (f"{COLORS['red']}[{COLORS['white']}1{COLORS['red']}]{COLORS['reset']} {COLORS['white']}Boost Tool{COLORS['reset']}", ""),
        (f"{COLORS['red']}[{COLORS['white']}2{COLORS['red']}]{COLORS['reset']} {COLORS['white']}Unboost{COLORS['reset']}", ""),
        (f"{COLORS['red']}[{COLORS['white']}0{COLORS['red']}]{COLORS['reset']} {COLORS['white']}–í—ã—Ö–æ–¥{COLORS['reset']}", "")
    ]
    
    for item, emoji in menu_items:
        fast_print(f"{emoji} {item}")
    fast_print()

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
    set_console_title("Boost Tool I Version: 1.5") 
    
    while True:
        try:
            main_menu()
            choice = input(COLORS['white'] + "üîò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: " + COLORS['reset']).strip()
            
            if choice == "1":
                fast_print(COLORS['white'] + " –í–≤–µ–¥–∏—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞: " + COLORS['reset'])
                url = input().strip()
                if not validate_url(url):
                    fast_print(COLORS['red'] + " –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL!" + COLORS['reset'])
                    continue
                
                fast_print(COLORS['white'] + " –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Å—Ç–æ–≤: " + COLORS['reset'])
                try:
                    count = int(input())
                    process_boosts(get_tokens(), count, "boost")
                except ValueError:
                    fast_print(COLORS['red'] + " –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!" + COLORS['reset'])
            
            elif choice == "2":
                fast_print(COLORS['white'] + " –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω—è—Ç–∏–π: " + COLORS['reset'])
                try:
                    count = int(input())
                    process_boosts(get_tokens(), count, "unboost")
                except ValueError:
                    fast_print(COLORS['red'] + " –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!" + COLORS['reset'])
            
            elif choice == "0":
                fast_print(COLORS['white'] + " –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã..." + COLORS['reset'])
                break
            
            else:
                fast_print(COLORS['red'] + " –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!" + COLORS['reset'])
            
            time.sleep(1)
        
        except KeyboardInterrupt:
            fast_print("\n –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            break
        except Exception as e:
            fast_print(COLORS['red'] + f" –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}" + COLORS['reset'])
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            input(COLORS['white'] + "\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." + COLORS['reset'])  # –ó–∞–º–µ–Ω–∏–ª sleep –Ω–∞ input –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –æ–∫–Ω–∞

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        fast_print(COLORS['red'] + f" –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}" + COLORS['reset'])
        logging.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        input(COLORS['white'] + "\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞..." + COLORS['reset'])
